{
  "hash": "0a003f5e3f8eb12c37fbe97758fca369",
  "result": {
    "markdown": "---\ntitle: \"Data Wrangling\"\nauthor: \"Kasper Valtonen\"\n---\n\n\n\nChallenge:\n\n::: {.cell hash='03_data_wrangling_cache/html/unnamed-chunk-1_0a0ac16eeb7dbf8164a321d02c6fa7da'}\n\n```{.r .cell-code}\n# Setting up libraries\nlibrary(vroom)\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#> ✔ dplyr     1.1.2     ✔ readr     2.1.4\n#> ✔ forcats   1.0.0     ✔ stringr   1.5.0\n#> ✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n#> ✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n#> ✔ purrr     1.0.1     \n#> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#> ✖ readr::col_character()   masks vroom::col_character()\n#> ✖ readr::col_date()        masks vroom::col_date()\n#> ✖ readr::col_datetime()    masks vroom::col_datetime()\n#> ✖ readr::col_double()      masks vroom::col_double()\n#> ✖ readr::col_factor()      masks vroom::col_factor()\n#> ✖ readr::col_guess()       masks vroom::col_guess()\n#> ✖ readr::col_integer()     masks vroom::col_integer()\n#> ✖ readr::col_logical()     masks vroom::col_logical()\n#> ✖ readr::col_number()      masks vroom::col_number()\n#> ✖ readr::col_skip()        masks vroom::col_skip()\n#> ✖ readr::col_time()        masks vroom::col_time()\n#> ✖ readr::cols()            masks vroom::cols()\n#> ✖ readr::date_names_lang() masks vroom::date_names_lang()\n#> ✖ readr::default_locale()  masks vroom::default_locale()\n#> ✖ dplyr::filter()          masks stats::filter()\n#> ✖ readr::fwf_cols()        masks vroom::fwf_cols()\n#> ✖ readr::fwf_empty()       masks vroom::fwf_empty()\n#> ✖ readr::fwf_positions()   masks vroom::fwf_positions()\n#> ✖ readr::fwf_widths()      masks vroom::fwf_widths()\n#> ✖ dplyr::lag()             masks stats::lag()\n#> ✖ readr::locale()          masks vroom::locale()\n#> ✖ readr::output_column()   masks vroom::output_column()\n#> ✖ readr::problems()        masks vroom::problems()\n#> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(readxl)\nlibrary(data.table)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> \n#> Attaching package: 'data.table'\n#> \n#> The following objects are masked from 'package:lubridate':\n#> \n#>     hour, isoweek, mday, minute, month, quarter, second, wday, week,\n#>     yday, year\n#> \n#> The following objects are masked from 'package:dplyr':\n#> \n#>     between, first, last\n#> \n#> The following object is masked from 'package:purrr':\n#> \n#>     transpose\n```\n:::\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n:::\n\n\nLet's import the reduced data to R with vroom\n\n::: {.cell hash='03_data_wrangling_cache/html/unnamed-chunk-2_d995bd75b1128e2e3f2cf41ae1afba85'}\n\n```{.r .cell-code}\n#Importing data\ncol_types <- list(\n  patent_id = col_character(),\n  id = col_character(),\n  assignee_id = col_character(),\n  type = col_integer(),\n  date = col_date(\"%Y-%m-%d\"),\n  num_claims = col_integer(),\n  organization = col_character(),\n  mainclass_id = col_character(),\n  sequence = col_integer()\n)\n\npatent_tbl <- vroom(\n            file       = \"C:\\\\Users\\\\35844\\\\ML\\\\ss23-bdsb-TurvaKassu\\\\Patent_data_reduced\\\\patent.tsv\", \n            delim      = \"\\t\", \n            col_types  = col_types,\n            na         = c(\"\", \"NA\", \"NULL\")\n        )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: The following named parsers don't match the column names: patent_id,\n#> assignee_id, type, organization, mainclass_id, sequence\n```\n:::\n\n```{.r .cell-code}\npatent_assignee_tbl <- vroom(\n            file = \"C:\\\\Users\\\\35844\\\\ML\\\\ss23-bdsb-TurvaKassu\\\\Patent_data_reduced\\\\patent_assignee.tsv\",\n            delim      = \"\\t\", \n            col_types  = col_types,\n            na         = c(\"\", \"NA\", \"NULL\")\n            )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: The following named parsers don't match the column names: id, type,\n#> date, num_claims, organization, mainclass_id, sequence\n```\n:::\n\n```{.r .cell-code}\nassignee_tbl <- vroom(\n            file = \"C:\\\\Users\\\\35844\\\\ML\\\\ss23-bdsb-TurvaKassu\\\\Patent_data_reduced\\\\assignee.tsv\",\n            delim      = \"\\t\", \n            col_types  = col_types,\n            na         = c(\"\", \"NA\", \"NULL\")\n            )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: The following named parsers don't match the column names: patent_id,\n#> assignee_id, date, num_claims, mainclass_id, sequence\n```\n:::\n\n```{.r .cell-code}\nuspc_tbl <- vroom(\n            file = \"C:\\\\Users\\\\35844\\\\ML\\\\ss23-bdsb-TurvaKassu\\\\Patent_data_reduced\\\\uspc.tsv\",\n            delim      = \"\\t\", \n            col_types  = col_types,\n            na         = c(\"\", \"NA\", \"NULL\")\n            )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: The following named parsers don't match the column names: id,\n#> assignee_id, type, date, num_claims, organization\n```\n:::\n\n```{.r .cell-code}\n# Combine tibbles\ncomplete_patent_tbl <- left_join(\n  patent_tbl, patent_assignee_tbl, by = c(\"id\" = \"patent_id\")) %>%\n  left_join(assignee_tbl, by = c(\"assignee_id\" = \"id\")) %>%\n  left_join(uspc_tbl, by = c(\"id\" = \"patent_id\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning in left_join(., uspc_tbl, by = c(id = \"patent_id\")): Detected an unexpected many-to-many relationship between `x` and `y`.\n#> ℹ Row 2 of `x` matches multiple rows in `y`.\n#> ℹ Row 109363 of `y` matches multiple rows in `x`.\n#> ℹ If a many-to-many relationship is expected, set `relationship =\n#>   \"many-to-many\"` to silence this warning.\n```\n:::\n:::\n\n\nTransform tibble into data.table and excluding NA values for organization\n\n::: {.cell hash='03_data_wrangling_cache/html/unnamed-chunk-3_f7d1eac164cf8625cab9682efa9f129a'}\n\n```{.r .cell-code}\npatent_dt <- as.data.table(complete_patent_tbl)[!is.na(organization)][!is.na(mainclass_id)]\n```\n:::\n\n\nQuestion 1: Which organizations posses most number of patents?\n\n::: {.cell hash='03_data_wrangling_cache/html/unnamed-chunk-4_36c12ccaf8b3bd10c0278720b3d95f1d'}\n\n```{.r .cell-code}\nnumber_of_patents <- patent_dt[, .N, by=organization] %>%\n  .[order(-N)] %>%\n  .[1:10]\nprint(number_of_patents)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>                                    organization     N\n#>  1: International Business Machines Corporation 19056\n#>  2:               Samsung Electronics Co., Ltd. 14523\n#>  3:                      Canon Kabushiki Kaisha  9467\n#>  4:                            Sony Corporation  8372\n#>  5:                       QUALCOMM Incorporated  7322\n#>  6:                       Microsoft Corporation  7195\n#>  7:                    Kabushiki Kaisha Toshiba  6957\n#>  8:                                 Google Inc.  6082\n#>  9:                         LG Electronics Inc.  5694\n#> 10:                       Panasonic Corporation  5641\n```\n:::\n:::\n\n\nQuestion 2: Companies with most patents in August 2014.\n\nFirst we need to add date column to previous dt manipulation\n\n::: {.cell hash='03_data_wrangling_cache/html/unnamed-chunk-5_a40aa5e8e02d3c691d2332056f807df7'}\n\n```{.r .cell-code}\nnumber_of_patents_august <- patent_dt[year(date) == 2014 & month(date) == 8, .N, by=organization] %>%\n  .[order(-N)] %>%\n  .[1:10]\nprint(number_of_patents)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>                                    organization     N\n#>  1: International Business Machines Corporation 19056\n#>  2:               Samsung Electronics Co., Ltd. 14523\n#>  3:                      Canon Kabushiki Kaisha  9467\n#>  4:                            Sony Corporation  8372\n#>  5:                       QUALCOMM Incorporated  7322\n#>  6:                       Microsoft Corporation  7195\n#>  7:                    Kabushiki Kaisha Toshiba  6957\n#>  8:                                 Google Inc.  6082\n#>  9:                         LG Electronics Inc.  5694\n#> 10:                       Panasonic Corporation  5641\n```\n:::\n:::\n\n\nQuestion 3: What is the most innovative tech industry?\n\nSolve the main class of most number of patents\n\n::: {.cell hash='03_data_wrangling_cache/html/unnamed-chunk-6_36c62aa408af9793bb42d5e0b0688545'}\n\n```{.r .cell-code}\n# Get the top10 orgs with most patents\ntop10_orgs <- patent_dt[, .N, by=organization] %>%\n  .[order(-N)] %>%\n  .[1:10] %>%\n  select(organization)\n\n# Only include rows with orgs from top10_orgs and group by mainclass_id\ntop5_mainclasses <- patent_dt[organization %in% top10_orgs$organization, \n                              .N, by=mainclass_id] %>%\n                    .[order(-N)] %>%\n                    .[1:5]\n\nprint(top5_mainclasses)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>    mainclass_id    N\n#> 1:          257 7979\n#> 2:          455 6191\n#> 3:          370 5483\n#> 4:          348 4113\n#> 5:          709 4018\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}