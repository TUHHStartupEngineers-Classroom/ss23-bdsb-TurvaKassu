{
  "hash": "6260fcf32d7a803cd45c01879a268c45",
  "result": {
    "markdown": "---\ntitle: \"Data Visualization\"\nauthor: \"Kasper Valtonen\"\n---\n\n\nReading data into tibble\n\n::: {.cell hash='04_data_visualization_cache/html/unnamed-chunk-1_ad849c94b16f807bf1dcfe4561e86271'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#> ✔ dplyr     1.1.2     ✔ readr     2.1.4\n#> ✔ forcats   1.0.0     ✔ stringr   1.5.0\n#> ✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n#> ✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n#> ✔ purrr     1.0.1     \n#> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#> ✖ dplyr::filter() masks stats::filter()\n#> ✖ dplyr::lag()    masks stats::lag()\n#> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(vroom)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> \n#> Attaching package: 'vroom'\n#> \n#> The following objects are masked from 'package:readr':\n#> \n#>     as.col_spec, col_character, col_date, col_datetime, col_double,\n#>     col_factor, col_guess, col_integer, col_logical, col_number,\n#>     col_skip, col_time, cols, cols_condense, cols_only, date_names,\n#>     date_names_lang, date_names_langs, default_locale, fwf_cols,\n#>     fwf_empty, fwf_positions, fwf_widths, locale, output_column,\n#>     problems, spec\n```\n:::\n\n```{.r .cell-code}\nlibrary(readxl)\nlibrary(readr)\nlibrary(scales)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> \n#> Attaching package: 'scales'\n#> \n#> The following object is masked from 'package:vroom':\n#> \n#>     col_factor\n#> \n#> The following object is masked from 'package:purrr':\n#> \n#>     discard\n#> \n#> The following object is masked from 'package:readr':\n#> \n#>     col_factor\n```\n:::\n\n```{.r .cell-code}\ncol_types <- list(\n  location = col_character(),\n  date = col_date(\"YYYY-MM-DD\"),\n  total_cases = col_integer(11)\n)\ncovid_data_tbl <- read_csv(\"https://covid.ourworldindata.org/data/owid-covid-data.csv\") %>%\n  as_tibble()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Rows: 311447 Columns: 67\n#> ── Column specification ────────────────────────────────────────────────────────\n#> Delimiter: \",\"\n#> chr   (4): iso_code, continent, location, tests_units\n#> dbl  (62): total_cases, new_cases, new_cases_smoothed, total_deaths, new_dea...\n#> date  (1): date\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\nFiltering rows with cases from Spain, France, Germany, UK, USA\n\n::: {.cell hash='04_data_visualization_cache/html/unnamed-chunk-2_07c01b13655bbf9d5361beb7dc8f4161'}\n\n```{.r .cell-code}\nselected_countries <- c(\"Spain\", \"France\", \"United Kingdom\", \"United States\", \"Germany\")\ncovid_data_filtered_tbl <- covid_data_tbl %>%\n  filter(!is.na(\"continent\"), covid_data_tbl$location %in% selected_countries)\n```\n:::\n\n\n\nSelecting columns that we need: Location, date, total_cases\n\n::: {.cell hash='04_data_visualization_cache/html/unnamed-chunk-3_360eacaea76ece5724b4fd0213716a17'}\n\n```{.r .cell-code}\nwrangled_covid_data <- covid_data_filtered_tbl %>%\n  select(location, date, total_cases)\n```\n:::\n\n\n\nPlot it with ggplot2\n\n::: {.cell hash='04_data_visualization_cache/html/unnamed-chunk-4_6786d92436663758d41f1a2433f81ad7'}\n\n```{.r .cell-code}\ndesired_colors <- c(\"Spain\" = \"red\", \"France\" = \"blue\", \"United Kingdom\" = \"green\", \"United States\" = \"orange\", \"Germany\" = \"purple\")\nggplot(wrangled_covid_data, aes(x = date, y = total_cases, color = location)) +\n  geom_line() +\n  scale_color_manual(values = desired_colors) +\n  scale_x_date(date_labels = \"%b %Y\", date_breaks = \"1 year\") +\n  labs(x = \"Date\", y = \"Total Cases\") +\n  ggtitle(\"Total Cases Over Time in Desired Locations\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: Removed 83 rows containing missing values (`geom_line()`).\n```\n:::\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n***********\n\nChallenge 2:\n\nLets merge the map data in\n\n::: {.cell hash='04_data_visualization_cache/html/unnamed-chunk-5_da2151347b8da054f13dac69e8cfc3bb'}\n\n```{.r .cell-code}\nworld <- map_data(\"world\") %>%\n  distinct(region, .keep_all = TRUE)\n\n\nwrangled_covid_data2 <- covid_data_tbl %>%\n  filter(!is.na(location)) %>%\n  select(location, date, total_cases, total_deaths) %>% \n  mutate(location = case_when(\n    location == \"United Kingdom\" ~ \"UK\",\n    location == \"United States\" ~ \"USA\",\n    location == \"Democratic Republic of Congo\" ~ \"Democratic Republic of the Congo\",\n    TRUE ~ location)) %>%\n  group_by(location) %>%\n  slice_max(order_by = total_cases, n = 1) %>%\n  ungroup() %>%\n  distinct(location, .keep_all = TRUE) %>%\n  mutate(mortality = total_deaths / total_cases) %>%\n  rename(region = location)\n\n  \n  merged_data <- merge(wrangled_covid_data2, world, \n                       by = \"region\", all.x = TRUE)\n```\n:::\n\n\n\nNow we are ready to plot the value on a map\n\n::: {.cell hash='04_data_visualization_cache/html/unnamed-chunk-6_f24173a8cd79579f77a8adf07387b17f'}\n\n```{.r .cell-code}\nggplot(merged_data) +\n  geom_map(map = world,\n           aes(map_id = region, fill = mortality),\n           color = \"black\") +\n  scale_fill_gradient(low = \"blue\", high = \"red\", na.value = \"gray\", \n                      limits = c(0.001, 0.05) ) +\n  labs(title = \"COVID-19 mortality rate on Heat Map\") +\n  coord_map() +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}